{
    "tests": [
        {
            "bash": "dfx deploy --argument='(vec { principal \"'$(dfx identity get-principal)'\" }, 1)' backend",
            "skip": false
        },
        {
            "bash": "dfx deploy frontend",
            "skip": false
        },
        {
            "bash": "dfx deploy --argument='(null)' internet_identity",
            "skip": false
        },
        {
            "bash": "dfx deploy icp_ledger --argument='(record {minting_account = \"'$(dfx ledger account-id)'\"; initial_values = vec { record { \"'$(dfx ledger account-id --of-canister backend)'\"; record { e8s=100_000_000_000 } }; }; send_whitelist = vec {}})'",
            "skip": false
        },
        {
            "bash": "dfx canister update-settings --add-controller $(dfx canister id backend) frontend",
            "skip": false
        },
        {
            "bash": "dfx canister update-settings --add-controller $(dfx canister id backend) backend",
            "skip": false
        },
        {
            "canisterName": "backend",
            "canisterMethod": "get_vault_balance",
            "methodArgs": "()",
            "expectedOutput": "(variant { ok = 100_000_000_000 : nat64 })"
        },
        {
            "canisterName": "backend",
            "canisterMethod": "get_canister_principal",
            "methodArgs": "()",
            "expectedOutput": "(\"rrkah-fqaaa-aaaaa-aaaaq-cai\")"
        },
        {
            "canisterName": "backend",
            "canisterMethod": "get_canister_address",
            "methodArgs": "()",
            "expectedOutput": "(\"082ecf2e3f647ac600f43f38a68342fba5b8e68b085f02592b77f39808a8d2b5\")"
        },
        {
            "canisterName": "backend",
            "canisterMethod": "get_signers",
            "methodArgs": "()",
            "expectedOutputBash": "echo \"(\n  vec {\n    principal \\\"$(dfx identity get-principal)\\\";\n  },\n)\""
        },
        {
            "canisterName": "backend",
            "canisterMethod": "get_signer_proposals",
            "methodArgs": "()",
            "expectedOutput": "(vec {})"
        }
    ]
}